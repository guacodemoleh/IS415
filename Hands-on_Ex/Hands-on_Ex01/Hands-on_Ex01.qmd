---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
author: "Victoria Grace ANN"
execute: 
  warning: false
date: "4 January, 2024"
date-modified: "last-modified"
---

# Getting Started

## Installing and loading R packages

In this section, I will install and load tidyverse and sf packages.

```{r}
pacman::p_load(tidyverse, sf)

```

# Importing geospatial data in shapefile format

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MP14_SUBZONE_WEB_PL")

```

```{r}
cyclingpath <- st_read(dsn = "data/geospatial",
                       layer = "CyclingPathGazette")
```

## Plotting the Geospatial Data

### Masterplan Subzone 2014 (URA)

```{r}
plot(mpsz)
```

Focusing on a specific attribute,

```{r}
plot(mpsz["PLN_AREA_N"])
```

### Cycling Path

```{r}
plot(cyclingpath)
```

# Importing geospatial data in kml format

The following code chunk differs from the shapefile code chunks, wherein the complete path for the kml file is provided.

```{r}
preschool <- st_read(dsn = "data/geospatial/PreSchoolsLocation.kml")
```

# How to check contents of simple feature data frame

## Working with st_geometry()

```{r}
st_geometry(mpsz)
```

### Plotting with st_geometry()

```{r}
plot(st_geometry(mpsz))
```

## Working with glimpse()

```{r}
glimpse(mpsz)
```

## Working with head()

```{r}
head(mpsz, n=5)
```

# Map Projection

## Assigning EPSG code to a simple feature data frame

The initial EPSG code of a data frame may not be the correct code for svy21, i.e. 3414. Hence, assign 3414 to the `mpsz` data frame:

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Check if the CRS is correct.

```{r}
st_crs(mpsz3414)
```

From the last line of the code chunk, the CRS for `mpsz3414` is indefinitely 3414.

## Transforming the projection of preschool from wgs84 to svy21

wgs84 is inappropriate for analysis involving the use of distance and/or area measurements:

```{r}
st_geometry(preschool)
```

Perform project transformation:

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

Displaying the content of `preschool3414` sf data frame:

```{r}
st_geometry(preschool3414)
```

Preschool is in the svy21 projected coordinate system now.

# Aspatial Data

## Importing aspatial data

Use *read_csv()* in the **readr** package to import `listing.csv`.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

Examine if `listings.csv` has been imported correctly (3483 rows and 18 columns).

```{r}
list(listings)
```

## Creating a simple feature data frame from an aspatial data frame

Convert `listing` data frame into a simple feature data frame using *st_as_sf()* in **sf** package.

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Breakdown of the above arguments:

1.  *coords* - to provide the column name of the x-coordinates first, followed by the column name of the y-coordinates

2.  *crs* - to provide the coordinates system in EPSG format. (Search for country EPSG codes at [epsg.io](epsg.io))

3. *%>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Examine content of newly created simple feature data frame:
```{r}
glimpse(listings_sf)
```
A new column called `geometry` has been added into the data frame. The `longitude` and `latitude` columns have been dropped from the data frame.

# Geoprocessing with sf package
## Buffering
Take for instance that the authority wants to acquire 5 metres fo reserved land on both sides of the current cycling path.

Such a scenario is possible if the authority is planning to upgrade an exiting cycling path. 

**Skill**: Determining the extent of the land required to acquire and the total land area.

1. *st_buffer()* of **sf** package is used to compute the 5-metre buffers around cycling paths
```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)
```

2. Calculate the area of the buffers as shown below:
```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

3. *sum()* of Base R is used to derive the total land involved in this upgrade.
```{r}
sum(buffer_cycling$AREA)
```

## Point-in-polygon count

Case: A pre-school service group wants to find out the number of preschools in each planning subzone.

1. Identify preschools located inside each subzone using *st_intersects*. Then use *length()* of Base R to calculate the number of preschools that fall within each subzone.
```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```
**Note**: *st_intersects* and *st_intersection* are two different functions.

Check summary statistics of newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.
```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of preschools, the *top_n()* of the **dplyr** package is used:
```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

**Calculate the density of preschools by planning subzone**
1. Use *st_area()* of **sf** package to get the area of each planning subzone
```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

2. To compute the density, use *mutate()* in the **dplyr** package.
```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/ Area * 1000000)
```

# Exploratory Data Analysis (error from this section onwards)

Apply function **hist()**:
```{r}
hist(mpsz3414$`PreSch Density`)
```

Using *ggplot2* function can enhance the presentation of the histogram.
```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="blue") +
  labs(title = "Are pre-schools even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

To observe the relationship between Pre-school Density and Pre-school Count, we can produce their scatterplot.
```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```


